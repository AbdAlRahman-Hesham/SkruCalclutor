@page "/PlayerNameEdit"
@inject ISavePlayerRepo Repo

<div class="player-card d-flex flex-column justify-content-between align-items-center p-3 mb-2 rounded-3">
    <div class="d-flex align-items-center">
        @if (Player?.IsFavorite ?? false)
        {
            <i class="fa-solid fa-star me-2"></i>
        }
        @if (IsEditingName)
        {
            <div style="display:flex; flex-direction:column; width:100%;">
                <div class="input-group mb-3">
                    
                    <select class="form-control"
                            @onchange="OnExistingPlayerSelected"
                            style="max-width:200px;">
                        @foreach (var existingPlayer in ExistingPlayers)
                        {
                            <option value="@existingPlayer.Name">@existingPlayer.Name</option>
                        }
                        <option value="custom">Add New Player</option>
                    </select>

                </div>
                    @if (IsCustomPlayerSelected)
                    {
                        <input type="text"
                               class="form-control mb-3"
                               @bind="EditableName"
                               placeholder="Player name" />
                    }
                <div class="d-flex justify-content-center">
                    <button class="btn btn-dark btn-sm me-2 gold-bg" @onclick="SavePlayerName">Save</button>
                    <button class="btn btn-secondary btn-sm" @onclick="CancelEditName">Cancel</button>
                </div>
            </div>
        }
        else
        {
            <span class="player-name" @onclick="EditPlayerName">@Player?.Name</span>
        }
    </div>

    <!-- Rest of the previous component remains the same -->
    <div class="d-flex align-items-center">
        <div class="total-score">Total Score: @Player?.Score</div>
        <button class="add-score-btn btn btn-link" @onclick="ShowInput">
            <i style="
                width:15px;
                height:15px;
                color:#DD497E;
            "
               class="fa-solid fa-plus pink"></i>
        </button>
    </div>

    @if (ShowInputField)
    {
        <div class="input-container">
            <input type="number"
                   @bind="ScoreToAdd"
                   placeholder="Enter score"
                   class="form-control"
                   style="width:30vw" />
            <button class="btn btn-dark mt-2 gold-bg" @onclick="AddScore">Add</button>
            <button class="btn btn-light mt-2" @onclick="AddScore2">Add x 2</button>
            <button class="btn btn-secondary mt-2" @onclick="CancelInput">Cancel</button>
        </div>
    }
</div>

@code {
    [Parameter] public Player? Player { get; set; }
    [Parameter] public EventCallback<(string PlayerName, int Score)> OnScoreAdded { get; set; }

    private List<SavedPlayer> ExistingPlayers { get; set; } = new();
    private bool ShowInputField { get; set; } = false;
    private int ScoreToAdd { get; set; }
    private bool IsEditingName { get; set; } = false;
    private string EditableName { get; set; } = string.Empty;
    private bool IsCustomPlayerSelected { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        // Load existing players from the database
        ExistingPlayers = await Repo.GetAllPlayersAsync();
    }

    private void OnExistingPlayerSelected(ChangeEventArgs e)
    {
        var selectedValue = e.Value?.ToString();

        if (selectedValue == "custom")
        {
            IsCustomPlayerSelected = true;
            EditableName = string.Empty;
        }
        else if (!string.IsNullOrEmpty(selectedValue))
        {
            IsCustomPlayerSelected = false;
            EditableName = selectedValue;
        }
    }

    private async Task SavePlayerName()
    {
        if (Player != null && !string.IsNullOrWhiteSpace(EditableName))
        {
            // If it's a new player, add to database
            if (IsCustomPlayerSelected)
            {
                var newPlayer = new SavedPlayer { Name = EditableName };
                await Repo.AddPlayer(newPlayer);

                // Refresh existing players list
                ExistingPlayers = await Repo.GetAllPlayersAsync();
            }

            // Update the player's name
            Player.Name = EditableName;
            IsEditingName = false;

            // Reset custom selection
            IsCustomPlayerSelected = false;
        }
    }

    // Rest of the previous methods remain the same
    private void ShowInput()
    {
        ShowInputField = true;
    }

    private async Task AddScore()
    {
        if (ScoreToAdd != 0 && Player.Score >= 0)
        {
            Player.Score += ScoreToAdd;
            await OnScoreAdded.InvokeAsync((Player.Name, Player.Score));
            ShowInputField = false;
            ScoreToAdd = 0;
        }
    }

    private async Task AddScore2()
    {
        if (ScoreToAdd != 0 && Player.Score >= 0)
        {
            Player.Score += ScoreToAdd * 2;
            await OnScoreAdded.InvokeAsync((Player.Name, Player.Score));
            ShowInputField = false;
            ScoreToAdd = 0;
        }
    }

    private void CancelInput()
    {
        ShowInputField = false;
    }

    private void EditPlayerName()
    {
        if (Player != null)
        {
            EditableName = Player.Name;
            IsEditingName = true;
        }
    }

    private void CancelEditName()
    {
        IsEditingName = false;
        IsCustomPlayerSelected = false;
    }
}